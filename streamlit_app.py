import streamlit as st
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
import category_encoders as ce
import plotly.express as px

st.set_page_config(page_title='üêß Penguin Classifier', layout='wide')
st.title("üêß –î–∞—Ç–∞—Å–µ—Ç Penguins - –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
st.header('–†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º –ø–∏–Ω–≥–≤–∏–Ω–æ–≤')

url = "https://raw.githubusercontent.com/dataprofessor/data/master/penguins_cleaned.csv"
df = pd.read_csv(url)

# –í—ã–≤–µ–¥–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—Ä–æ–∫
st.write('## 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—Ä–æ–∫')
st.dataframe(df.sample(10), use_container_width=True)

# –ì—Ä–∞—Ñ–∏–∫–∏
st.write('## –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è')
col1, col2 = st.columns(2)

with col1:
    fig1 = px.histogram(df, x='species', color='island', barmode='group', title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–æ–≤ –ø–æ –æ—Å—Ç—Ä–æ–≤–∞–º')
    st.plotly_chart(fig1, use_container_width=True)
with col2:
    fig2 = px.scatter(df, x='bill_length_mm', y='flipper_length_mm', color='species',
                      title='–î–ª–∏–Ω–∞ –∫–ª—é–≤–∞ vs. –î–ª–∏–Ω–∞ –∫—Ä—ã–ª–∞')
    st.plotly_chart(fig2, use_container_width=True)



# –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
X = df.drop(columns=['species'])
y = df['species']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

encoder = ce.TargetEncoder(cols=['island', 'sex'])
X_train_encoded = encoder.fit_transform(X_train, y_train)
X_test_encoded = encoder.transform(X_test)

### –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
models = {'Decision Tree': DecisionTreeClassifier(random_state=42),
          'KNN': KNeighborsClassifier(4),
          }

results = []

for name, model in models.items():
    model.fit(X_train_encoded, y_train)
    acc_train = accuracy_score(y_train, model.predict(X_train_encoded))
    acc_test = accuracy_score(y_test, model.predict(X_test_encoded))
    results.append({
        'Model': name,
        'Train Accuracy': round(acc_train, 2),
        'Test Accuracy': round(acc_test, 2)
    })

st.write('## –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏')
st.table(pd.DataFrame(results))

'''
st.sidebar.header('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')
island_input = st.sidebar.selectbox('–û—Å—Ç—Ä–æ–≤', df['island'].unique())
sex_input = st.sidebar.selectbox('–ü–æ–ª', df['sex'].unique())

user_input = pd.DataFrame([{
    'island': island_input,
    'sex': sex_input
}])

st.dataframe(user_input, use_container_width=True)

st.sidebar.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
for name, model in models.items():
    pred = model.predict(user_encoded)[0]
    proba = model.predict_proba(user_encoded)[0]
    st.sidebar.markdown(f"**{name}: {pred}**")
    proba_df = pd.DataFrame({'–í–∏–¥': model.classes_, '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': proba})
    st.sidebar.dataframe(proba_df.set_index("–í–∏–¥"), use_container_width=True)
'''
